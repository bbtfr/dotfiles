#!/usr/bin/python3

import base64
import os
import shlex
import subprocess
import sys
from configparser import ConfigParser

import click

RCLONE_CONFIG_FILE = os.path.expanduser("~/.config/rclone/rclone.conf")
RCLONE_MOINTPOINT = os.path.expanduser("~/Mount")
RCLONE_AES_KEY = b"\x9c\x93\x5b\x48\x73\x0a\x55\x4d\x6b\xfd\x7c\x63\xc8\x86\xa9\x2b\xd3\x90\x19\x8e\xb8\x12\x8a\xfb\xf4\xde\x16\x2b\x8b\x95\xf6\x38"
LOCAL_RUNNER_PATH = (
    "/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
)


@click.group
def cli():
    pass


def run_command(commands, check=True, shell=False, **kwargs):
    print("Run Command:", commands if shell else shlex.join(commands), file=sys.stderr)
    proc = subprocess.run(commands, shell=shell, **kwargs)
    if check and proc.returncode:
        sys.exit(proc.returncode)
    return proc


def load_rclone_config(server_name=None):
    parser = ConfigParser()
    parser.read(RCLONE_CONFIG_FILE)
    if server_name is not None:
        return dict(parser[server_name])
    return parser


def decrypt_rclone_pass(password):
    # https://github.com/rclone/rclone/blob/master/fs/config/obscure/obscure.go#L71
    from Crypto.Cipher import AES
    from Crypto.Util import Counter

    missing_padding = len(password) % 4
    if missing_padding:
        password += "=" * (4 - missing_padding)
    password = base64.urlsafe_b64decode(password)
    initial_value = int.from_bytes(password[: AES.block_size], byteorder="big")
    cipher_text = password[AES.block_size :]
    counter = Counter.new(128, initial_value=initial_value)
    cipher = AES.new(RCLONE_AES_KEY, mode=AES.MODE_CTR, counter=counter)
    password = cipher.decrypt(cipher_text)
    return password.decode()


def encrypt_rclone_pass(password):
    # https://github.com/rclone/rclone/blob/master/fs/config/obscure/obscure.go#L48
    from Crypto import Random
    from Crypto.Cipher import AES
    from Crypto.Util import Counter

    initial_value = Random.new().read(AES.block_size)
    initial_value = int.from_bytes(initial_value, byteorder="big")
    counter = Counter.new(128, initial_value=initial_value)
    cipher = AES.new(RCLONE_AES_KEY, mode=AES.MODE_CTR, counter=counter)
    cipher_text = cipher.decrypt(password.encode())
    password = initial_value.to_bytes(AES.block_size, byteorder="big") + cipher_text
    return base64.urlsafe_b64encode(password).rstrip(b"=")


def generate_sshpass_command(commands, server_info):
    if "pass" not in server_info:
        return commands
    os.environ["SSHPASS"] = decrypt_rclone_pass(server_info["pass"])
    if commands[0] == "sshfs":
        return commands + ["-o", "ssh_command=sshpass -e ssh"]
    return ["sshpass", "-e"] + commands


def set_iterm_badge(badge=""):
    if badge:
        badge = base64.b64encode(badge.encode()).decode()
    subprocess.call('printf "\\e]1337;SetBadgeFormat=%s\\a"' % badge, shell=True)


@cli.command(name="pass")
@click.argument("password")
@click.option("-d", "--decrypt", is_flag=True, help="decrypt password")
def password(password, decrypt):
    func = decrypt_rclone_pass if decrypt else encrypt_rclone_pass
    click.echo(func(password))


@cli.command
@click.argument("server_name")
def connect(server_name):
    server_info = load_rclone_config(server_name)

    assert server_info["type"] == "sftp", server_info
    remote = "%s@%s" % (server_info["user"], server_info["host"])

    commands = ["ssh", "-CAXY", remote]
    commands = generate_sshpass_command(commands, server_info)

    set_iterm_badge(server_name)
    proc = run_command(commands, check=False)
    set_iterm_badge()
    sys.exit(proc.returncode)


def mount_volume(mountpoint, server_info):
    remote = "%s@%s:%s" % (
        server_info["user"],
        server_info["host"],
        server_info.get("mount", "/"),
    )
    extra_options = ["-o", "auto_cache,reconnect,defer_permissions,noappledouble"]
    commands = ["sshfs", remote, mountpoint, *extra_options]
    commands = generate_sshpass_command(commands, server_info)
    run_command(commands)


def umount_volume(mountpoint):
    commands = ["diskutil", "umount", "force", mountpoint]
    run_command(commands)


@cli.command
@click.argument("server_name")
def remount(server_name):
    server_info = load_rclone_config(server_name)

    assert server_info["type"] == "sftp", server_info
    mountpoint = os.path.join(RCLONE_MOINTPOINT, server_name)

    if not os.path.exists(mountpoint):
        os.makedirs(mountpoint)

    if os.path.ismount(mountpoint):
        umount_volume(mountpoint)

    mount_volume(mountpoint, server_info)


@cli.command
@click.argument("server_name")
def umount(server_name):
    mountpoint = os.path.join(RCLONE_MOINTPOINT, server_name)
    umount_volume(mountpoint)
    os.rmdir(mountpoint)


@cli.command
@click.argument("server_name")
def setup(server_name):
    server_info = load_rclone_config(server_name)

    assert server_info["type"] == "sftp", server_info
    remote = "%s@%s" % (server_info["user"], server_info["host"])

    setup_file = os.path.join(
        os.path.dirname(os.path.dirname(__file__)), "scripts", "setup.sh"
    )
    commands = ["ssh", "-CAXY", remote, "bash -sx"]
    commands = generate_sshpass_command(commands, server_info)
    commands = shlex.join(commands)
    commands += " < %s" % setup_file

    run_command(commands, shell=True)


def _set_host_info(hosts, name, host, info):
    host = host.strip()
    info = dict(info)
    info["name"] = name

    if host in hosts:
        print("Warning: %r already registered, %s vs %s" % (host, hosts[host], info))
        return
    hosts[host] = info


def load_rclone_hosts():
    hosts = {}
    for name, info in load_rclone_config().items():
        if info.get("type", "") != "sftp":
            continue
        if "alias" not in info:
            _set_host_info(hosts, name, info["host"], info)
            continue
        for host in info["alias"].split(","):
            _set_host_info(hosts, name, host, info)
    return hosts


@cli.command("local-runner")
@click.argument("host")
@click.argument("command")
@click.argument("path")
def local_runner(host, command, path):
    hosts = load_rclone_hosts()

    assert host in hosts, "%r not found in rclone config" % host

    os.environ["PATH"] = LOCAL_RUNNER_PATH

    server_info = hosts[host]
    server_name = server_info["name"]
    remote = server_info.get("mount", "/")
    mountpoint = os.path.join(RCLONE_MOINTPOINT, server_name)

    if not os.path.ismount(mountpoint):
        mount_volume(mountpoint, server_info)

    localpath = os.path.join(mountpoint, os.path.relpath(path, remote))
    commands = [command, localpath]
    run_command(commands)


if __name__ == "__main__":
    cli()
