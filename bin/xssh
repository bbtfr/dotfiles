#!/usr/bin/env ruby
require 'base64'
require 'yaml'

# ##### sample .servers.yml
# your_server_id: # eg: remote-host
#   username: your_name # eg: theo
#   hostname: your_server_name # 192.168.1.100
#   remotedir: remote_dir_you_d_like_to_mount # /home/theo
#   mountpoint: local_dir_you_d_like_to_mount_to # eg: /mnt/remote-host
#
def sshpass command, server_info
  if server_info['password']
    ENV['SSHPASS'] = server_info['password']
    command = "sshpass -e #{command}"
  end
  command
end

def connect server, server_info
  command = "ssh -CAXY #{server_info['username']}@#{server_info['hostname']}"
  command = "#{command} #{server_info['extra_connect_options']}" if server_info['extra_connect_options']
  command = sshpass command, server_info

  system "printf \"\\e]1337;SetBadgeFormat=#{Base64.encode64(server)}\\a\""
  system "ssh-add -K ~/.ssh/id_rsa"
  puts "Run command: #{command}"
  system command
  system "printf \"\\e]1337;SetBadgeFormat=\\a\""
end

def mount server, server_info
  command = "sshfs #{server_info['username']}@#{server_info['hostname']}:#{server_info['remotedir']} #{server_info['mountpoint']} -o auto_cache,reconnect,defer_permissions,noappledouble"
  command = sshpass command, server_info

  system "mkdir -p #{server_info['mountpoint']}"
  puts "Run command: #{command}"
  system command
end

def umount server, server_info
  command = "diskutil unmount force #{server_info['mountpoint']}"

  system "mkdir -p #{server_info['mountpoint']}"
  puts "Run command: #{command}"
  system command
  system "rm -r #{server_info['mountpoint']}"
end

def proxy server, server_info
  port = server_info['proxy_port'] || 7071
  command = "ssh -CN #{server_info['username']}@#{server_info['hostname']} -D #{port}"
  command = sshpass command, server_info

  puts "Run command: #{command}"
  puts "Listening on localhost:#{port} (Press CTRL+C to quit)"

  loop do
    system command
    puts "Rerun command: #{command}"
    puts "Listening on localhost:#{port} (Press CTRL+C to quit)"
  end
rescue Interrupt
end

def copy_from server, server_info
  from = ARGV[2]
  to = ARGV[3]
  command = "scp #{server_info['username']}@#{server_info['hostname']}:#{from} #{to}"
  command = sshpass command, server_info

  puts "Run command: #{command}"
  system command
end

def copy_to server, server_info
  from = ARGV[2]
  to = ARGV[3]
  command = "scp #{from} #{server_info['username']}@#{server_info['hostname']}:#{to}"
  command = sshpass command, server_info

  puts "Run command: #{command}"
  system command
end

def local_runner server, server_info
  # ##### sample script on remote side
  # #!/bin/bash -e
  # echo LOCAL RUNNER: $(hostname -f) open $(realpath $1)
  #
  # ##### ITerm2 trigger config
  # Rugular Expression: ^LOCAL RUNNER: (.*)$
  # Action:             Run Command...
  # Parameters:         /Users/amber/Workspace/MEGVII/memo/ssh.rb local-runner \1
  #
  require 'pathname'

  runner = ARGV[2]
  path = Pathname.new(ARGV[3])
  redirects = server_info['redirects']
  redirects.each do |rule, redirect|
    server_info = load_server_info redirect if path.fnmatch?(rule)
  end if redirects

  rewrites = server_info['rewrites']
  rewrites.each do |rule, text|
    path = Pathname.new(path.to_s.gsub(rule, text))
  end if rewrites

  remotedir = Pathname.new(server_info['remotedir'])
  mountpoint = Pathname.new(server_info['mountpoint'])

  unless File.exists? File.expand_path(mountpoint)
    mount server, server_info
  end

  if path == remotedir || path.fnmatch?(File.join(remotedir, '**'))
    path = path.relative_path_from(remotedir)
    command = "#{runner} #{File.join(mountpoint, path)}"
    puts "Run command: #{command}"
    system command
  else
    raise RuntimeError, "Remote path `#{path}'' is not in remotedir `#{remotedir}'"
  end
end

def load_server_info server
  yaml_data = YAML.load_file(File.expand_path('.servers.yml', DOTFILES_PATH))
  server_info = yaml_data[server]
  return server_info if server_info
  matcher = yaml_data.find{ |name, info| info['alias'] == server }
  matcher && matcher.last
end

DOTFILES_PATH = File.dirname(File.dirname(__FILE__))
# Redirect stdout & stderr to log file if no tty present
unless $stdout.tty? && $stdout.tty?
  logfile = File.open(File.join(DOTFILES_PATH, 'xssh.log'), 'w')
  $stdout = logfile
  $stderr = logfile
end

action, server = case ARGV.size
  when 0
    raise RuntimeError, "Please provide action and server name"
  when 1
    ['connect', ARGV[0]]
  else
    [ARGV[0].gsub('-', '_'), ARGV[1]]
  end

server_info = load_server_info server
raise RuntimeError, "Server named `#{server}' not found in .servers.yml" unless server_info

send action, server, server_info
